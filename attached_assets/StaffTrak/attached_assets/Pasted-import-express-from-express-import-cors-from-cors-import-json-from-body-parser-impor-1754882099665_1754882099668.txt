import express from "express";
import cors from "cors";
import { json } from "body-parser";
import { ReplitDB } from "@replit/database";

const app = express();
const db = new ReplitDB();

app.use(cors());
app.use(json());

const PORT = process.env.PORT || 3001;

/** Utility helpers **/

// Keys for storing arrays
const EMPLOYEES_KEY = "employees";
const EQUIPMENT_KEY = "equipment";
const PROJECTS_KEY = "projects";

// Initialize DB keys if empty
async function initData() {
  if ((await db.get(EMPLOYEES_KEY)) === null) {
    await db.set(EMPLOYEES_KEY, []);
  }
  if ((await db.get(EQUIPMENT_KEY)) === null) {
    await db.set(EQUIPMENT_KEY, []);
  }
  if ((await db.get(PROJECTS_KEY)) === null) {
    await db.set(PROJECTS_KEY, []);
  }
}
initData();

/** ====== GET endpoints ====== **/

app.get("/api/employees", async (req, res) => {
  const employees = (await db.get(EMPLOYEES_KEY)) || [];
  res.json(employees);
});

app.get("/api/equipment", async (req, res) => {
  const equipment = (await db.get(EQUIPMENT_KEY)) || [];
  res.json(equipment);
});

app.get("/api/projects", async (req, res) => {
  const projects = (await db.get(PROJECTS_KEY)) || [];
  res.json(projects);
});

/** ====== PATCH endpoints ====== **/

app.patch("/api/employees/:id", async (req, res) => {
  const employees = (await db.get(EMPLOYEES_KEY)) || [];
  const id = req.params.id;
  const update = req.body;

  let found = false;
  const updatedEmployees = employees.map((emp) => {
    if (emp.id === id) {
      found = true;
      return { ...emp, ...update };
    }
    return emp;
  });
  if (!found) return res.status(404).json({ error: "Employee not found" });

  await db.set(EMPLOYEES_KEY, updatedEmployees);
  res.json({ success: true });
});

app.patch("/api/equipment/:id", async (req, res) => {
  const equipment = (await db.get(EQUIPMENT_KEY)) || [];
  const id = req.params.id;
  const update = req.body;

  let found = false;
  const updatedEquipment = equipment.map((eq) => {
    if (eq.id === id) {
      found = true;
      return { ...eq, ...update };
    }
    return eq;
  });
  if (!found) return res.status(404).json({ error: "Equipment not found" });

  await db.set(EQUIPMENT_KEY, updatedEquipment);
  res.json({ success: true });
});

/** ====== POST endpoints (Create) ====== **/

// Helper to generate UUID (simple)
function uuidv4() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0,
      v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

app.post("/api/employees", async (req, res) => {
  const employees = (await db.get(EMPLOYEES_KEY)) || [];
  const newEmp = {
    id: uuidv4(),
    name: req.body.name || "Unnamed Employee",
    skills: req.body.skills || [],
    currentProjectId: null,
    currentSupervisorId: null,
    assignedEquipmentIds: [],
  };
  employees.push(newEmp);
  await db.set(EMPLOYEES_KEY, employees);
  res.status(201).json(newEmp);
});

app.post("/api/equipment", async (req, res) => {
  const equipment = (await db.get(EQUIPMENT_KEY)) || [];
  const newEq = {
    id: uuidv4(),
    name: req.body.name || "Unnamed Equipment",
    attachments: req.body.attachments || [],
    currentProjectId: null,
    currentEmployeeId: null,
  };
  equipment.push(newEq);
  await db.set(EQUIPMENT_KEY, equipment);
  res.status(201).json(newEq);
});

app.post("/api/projects", async (req, res) => {
  const projects = (await db.get(PROJECTS_KEY)) || [];
  const newProj = {
    id: uuidv4(),
    name: req.body.name || "New Project",
    supervisorIds: req.body.supervisorIds || [],
    employeeIds: [],
    equipmentIds: [],
  };
  projects.push(newProj);
  await db.set(PROJECTS_KEY, projects);
  res.status(201).json(newProj);
});

/** ====== Simple Conflict Check Endpoint ====== **/

// Returns any employees or equipment assigned to multiple projects (conflicts)
app.get("/api/conflicts", async (req, res) => {
  const employees = (await db.get(EMPLOYEES_KEY)) || [];
  const equipment = (await db.get(EQUIPMENT_KEY)) || [];

  // Employees assigned to more than one project? (shouldn't happen in current model, but just check)
  const empProjectMap = {};
  const empConflicts = [];
  employees.forEach((emp) => {
    if (emp.currentProjectId) {
      if (empProjectMap[emp.id]) {
        empConflicts.push(emp);
      } else {
        empProjectMap[emp.id] = emp.currentProjectId;
      }
    }
  });

  // Equipment conflicts similarly
  const eqProjectMap = {};
  const eqConflicts = [];
  equipment.forEach((eq) => {
    if (eq.currentProjectId) {
      if (eqProjectMap[eq.id]) {
        eqConflicts.push(eq);
      } else {
        eqProjectMap[eq.id] = eq.currentProjectId;
      }
    }
  });

  res.json({ employeeConflicts: empConflicts, equipmentConflicts: eqConflicts });
});

/** ====== Start server ====== **/

app.listen(PORT, () => {
  console.log(`Backend API running on port ${PORT}`);
});
