// imports
import CommandBar from "@/components/CommandBar";
import { applyActions } from "@/lib/applyActions";
import { apiRequest, queryClient } from "@/lib/queryClient"; // already in your repo
import { useQueryClient } from "@tanstack/react-query";

// inside your component:
const qc = useQueryClient();

// helpers that hit the SAME endpoints as DnD:
async function handleMoveEmployee(employeeId: string, destProjectId: string | null) {
  await apiRequest("PATCH", `/api/employees/${employeeId}/assignment`, {
    currentProjectId: destProjectId,
  });
  // keep UI fresh
  await Promise.allSettled([
    qc.invalidateQueries(), // or target specific keys if you have them
  ]);
}

async function handleMoveEquipment(equipmentId: string, destProjectId: string | null) {
  await apiRequest("PATCH", `/api/equipment/${equipmentId}/assignment`, {
    currentProjectId: destProjectId,
  });
  await Promise.allSettled([qc.invalidateQueries()]);
}

// mount the bar (place it above your lists)
<CommandBar
  runActions={(actions) =>
    applyActions({
      actions,
      // fuzzy resolvers: tweak as needed
      findEmployeeByQuery: (q) => {
        const qq = q.toLowerCase();
        return employees.find((e) => e.name.toLowerCase().includes(qq));
      },
      findEquipmentByQuery: (q) => {
        const qq = q.toLowerCase();
        return equipment.find(
          (x) =>
            x.name.toLowerCase().includes(qq) ||
            x.type.toLowerCase().includes(qq)
        );
      },
      // use project NAME in command â†’ map to ID here
      moveEmployee: async (employeeId, projectName) => {
        const dest = projects.find(
          (p) => p.name.toLowerCase() === projectName.toLowerCase()
        );
        if (!dest) return; // optionally toast "Project not found"
        await handleMoveEmployee(employeeId, dest.id);
      },
      assignEquipment: async (equipmentId, projectName) => {
        const dest = projects.find(
          (p) => p.name.toLowerCase() === projectName.toLowerCase()
        );
        if (!dest) return;
        await handleMoveEquipment(equipmentId, dest.id);
      },
      showUnassigned: (date) => {
        // optional: scroll to Unassigned group or open a modal
        console.log("Unassigned requested for", date);
      },
    })
  }
/>
